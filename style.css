.navbar * {
  color: inherit;
  height: 2rem;
  /* Override line-height to center text in navbar */
  line-height: 1;
}

.navbar {
  position: sticky;
  top: 0;
  z-index: 999;
}

.wrapper {
  display: flex;
  width: 100%;
}

#sidebar {
  min-width: 250px;
  max-width: 350px;
  background-color: #e1e5eb33;
  /* 2 rem + 0.5 rem * 2 for padding */
  height: calc(100vh - 3rem);
  padding: 0.75rem 0;
  position: fixed;
  top: 3rem;
  left: 0;
}

#sidebar div ul li:hover {
  background-color: white;
  border-radius: 6px;
}

#content {
margin-left: 250px;
}

.list {
  background-color: white;
}

.list-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 8px;
}

.list-item p {
  display: inline;
}

.item-description {
  display: block;
}

.icon-container {
  visibility: hidden;
}

.icon-button {
  background-color: transparent;
  border: none;
  border-radius: 50%;
}

.icon-button:focus {
  outline: none;
}

.icon-button:hover {
  background-color: rgba(233, 233, 233, 0.986);
}

/* Renders svg elements as unable to be the receiver of events, ensuring the target of the delete button
    event as the button instead of the path or event. Alternate way is to create a masking rectangle
    and for that to be clickable instead */

svg {
  pointer-events: none;
}

.menu-item {
  border: 0;
  background-color: transparent;
}

h1 span:focus {
  outline: none;
  border-bottom: #e1e5eb33;
}

#summary {
  color: rgba(0, 0, 0, 0.466);
}

.list-unstyled li div {
  display: flex;
  justify-content: space-between;
}

#add-list-button {
  padding: 0 0.75rem;
}

#add-list-button:hover,
#add-list-button:focus,
#add-list-button:active {
  outline: none;
  box-shadow: none;
}

/* The below is needed to change the SVG fill upon the different states. Simply changing the color element is not enough. 
Changing the buttons */
#add-list-button:hover svg,
#add-list-button:focus svg,
#add-list-button:active svg {
  fill: black;
}

/* Adapted code from https://css-tricks.com/custom-styling-form-inputs-with-modern-css-features/ */
@supports (-webkit-appearance: none) or (-moz-appearance: none) {
  input[type="checkbox"] {
    --active-inner: #fff;
    --focus: 2px rgba(39, 94, 254, 0.3);
    --border: #bbc1e1;
    --border-hover: #275efe;
    --background: #fff;
    --disabled: #f6f8ff;
    --disabled-inner: #e1e6f9;
    -webkit-appearance: none;
    -moz-appearance: none;
    height: 21px;
    outline: none;
    display: inline-block;
    vertical-align: top;
    border-radius: 50%;
    position: relative;
    margin: 0;
    cursor: pointer;
    border: 1px solid var(--bc, var(--border));
    background: var(--b, var(--background));
    -webkit-transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
    transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
    width: 21px;
    z-index: 0;
  }
  input[type="checkbox"]::after {
    content: "";
    display: block;
    left: 0;
    top: 0;
    position: absolute;
    -webkit-transition: opacity var(--d-o, 0.2s),
      -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
    transition: opacity var(--d-o, 0.2s),
      -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease),
      opacity var(--d-o, 0.2s);
    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease),
      opacity var(--d-o, 0.2s),
      -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
    opacity: var(--o, 0);
    width: 5px;
    height: 9px;
    border: 2px solid var(--active-inner);
    border-top: 0;
    border-left: 0;
    left: 7px;
    top: 4px;
    -webkit-transform: rotate(var(--r, 20deg));
    transform: rotate(var(--r, 20deg));
  }

  input[type="checkbox"]:checked {
    /* Taking Bootstrap's blue */
    --b: var(--blue);
    --bc: var(--blue);
    --d-o: 0.3s;
    --d-t: 0.6s;
    --d-t-e: cubic-bezier(0.2, 0.85, 0.32, 1.2);
    --o: 1;
    --r: 43deg;
  }

  input[type="checkbox"]:hover:not(:checked) {
    --bc: var(--border-hover);
  }

  input[type="checkbox"]:focus {
    box-shadow: 0 0 0 var(--focus);
  }
}
